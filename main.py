import logging
import asyncio
import random
from datetime import datetime
import os

import aiosqlite
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandObject
from aiogram.types import CallbackQuery, Message, LabeledPrice, PreCheckoutQuery
from aiogram.enums import ChatMemberStatus
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
logger = logging.getLogger(__name__)

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê ---
BOT_TOKEN = os.getenv("BOT_TOKEN", "7873522119:AAHWIa4R2MrexWmEi_wfUexTKtKB4GsxpXw")
DB_PATH = "bot.db"
ADMIN_IDS = [6179115044, 7189733067] # –î–ª—è "—Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω" –∫–æ–º–∞–Ω–¥—ã /give

PING_MESSAGES = [
    "—á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?", "–∑–∞—Ö–æ–¥–∏ –Ω–∞ –∏–≥—Ä—É?", "–∫–∞–∫ –Ω–∞—Å—á–µ—Ç –∫–∞—Ç–∫–∏?", "–≥–æ –æ–±—â–∞—Ç—å—Å—è!", "—Å–∫—É—á–Ω–æ, –¥–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º?", "–∫–∞–∫–∏–µ –ø–ª–∞–Ω—ã –Ω–∞ –≤–µ—á–µ—Ä?", "—á—Ç–æ –Ω–æ–≤–æ–≥–æ?", "–º—ã —Å–∫—É—á–∞–µ–º –ø–æ —Ç–µ–±–µ!", "–ø–æ—Ä–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å—Ç—Ä–æ–π!", "—Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç!", "–ü–æ–π–¥–µ–º –Ω–∞ –∫—Ä–∞–π–Ω—é—é –ø–µ—Ä–µ–¥ –∞–Ω–∞–±–∏–æ–∑–æ–ºüåü", "–∫–∞–∫–æ–π —Ñ–∏–ª—å–º –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å?", "–Ω—É–∂–Ω–∞ —Ç–≤–æ—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞!", "—Ç—ã –≥–¥–µ –ø—Ä–æ–ø–∞–ª(–∞)?", "–¥–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å!", "–∑–∞–≥–ª—è–¥—ã–≤–∞–π –∫ –Ω–∞–º –ø–æ—á–∞—â–µ!", "—Ç—É—Ç –±–µ–∑ —Ç–µ–±—è –Ω–∏–∫–∞–∫!", "–µ—Å—Ç—å –º–∏–Ω—É—Ç–∫–∞?", "–∫–∞–∫—É—é –º—É–∑—ã–∫—É —Å–ª—É—à–∞–µ—à—å?", "—É –Ω–∞—Å —Ç—É—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!", "–ø–æ—è–≤–∏—Å—å, –º—ã –≤—Å–µ –ø—Ä–æ—Å—Ç–∏–º!", "–∫–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏?", "–Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∑–∞–ª–∞!", "–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?", "–∫—Ç–æ —Å–º–æ—Ç—Ä–µ–ª –Ω–æ–≤—ã–π —Å–µ—Ä–∏–∞–ª?", "–¥–µ–ª–∏—Ç–µ—Å—å –º–µ–º–∞–º–∏!", "–∫–∞–∂–µ—Ç—Å—è, –∫—Ç–æ-—Ç–æ –æ—Ç–ª—ã–Ω–∏–≤–∞–µ—Ç –æ—Ç –æ–±—â–µ–Ω–∏—è...", "–¥–∞–≤–∞–π –ø–æ–±–æ–ª—Ç–∞–µ–º?", "–∫—Ç–æ —Ö–æ—á–µ—Ç –≤ –ø–∞—Ç–∏?", "—á—Ç–æ –ø–æ—á–∏—Ç–∞—Ç—å –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å?", "—Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å?",
]

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

class TopupStates(StatesGroup):
    waiting_for_amount = State()

# --- –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ---
async def init_db():
    try:
        conn = await aiosqlite.connect(DB_PATH)
        await conn.execute("""CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY, username TEXT, balance INTEGER,
            prefix_end INTEGER, antitar_end INTEGER, vip_end INTEGER,
            last_hunt INTEGER, partner_id INTEGER, proposal_from_id INTEGER
        )""")
        await conn.commit()
        cursor = await conn.execute("PRAGMA table_info(users)")
        columns = [row[1] for row in await cursor.fetchall()]
        if 'partner_id' not in columns:
            await conn.execute("ALTER TABLE users ADD COLUMN partner_id INTEGER")
        if 'proposal_from_id' not in columns:
            await conn.execute("ALTER TABLE users ADD COLUMN proposal_from_id INTEGER")
        await conn.commit()
        await conn.close()
        logger.info("Database initialized successfully")
    except Exception as e:
        logger.exception(f"Error initializing database: {e}")

async def get_user(user_id: int):
    async with aiosqlite.connect(DB_PATH) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT * FROM users WHERE user_id = ?", (user_id,)) as cursor:
            return await cursor.fetchone()

async def add_user(user_id: int, username: str):
    async with aiosqlite.connect(DB_PATH) as conn:
        await conn.execute(
            "INSERT OR IGNORE INTO users (user_id, username, balance, prefix_end, antitar_end, vip_end, last_hunt, partner_id, proposal_from_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
            (user_id, username, 0, 0, 0, 0, 0, 0, 0)
        )
        await conn.commit()

async def update_user_field(user_id: int, field: str, value):
    async with aiosqlite.connect(DB_PATH) as conn:
        query = f"UPDATE users SET {field} = ? WHERE user_id = ?"
        await conn.execute(query, (value, user_id))
        await conn.commit()

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
async def get_user_mention_by_id(user_id: int) -> str:
    try:
        user = await bot.get_chat(user_id)
        return f'<a href="tg://user?id={user.id}">{user.full_name}</a>'
    except TelegramBadRequest:
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id})"
    except Exception as e:
        logger.error(f"Could not get user mention for {user_id}: {e}")
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id})"

async def check_items(user_id: int):
    user = await get_user(user_id)
    if not user: return
    now = int(datetime.now().timestamp())
    updates = {}
    if user["prefix_end"] != 0 and user["prefix_end"] < now: updates["prefix_end"] = 0
    if user["antitar_end"] != 0 and user["antitar_end"] < now: updates["antitar_end"] = 0
    if user["vip_end"] != 0 and user["vip_end"] < now: updates["vip_end"] = 0
    for field, value in updates.items(): await update_user_field(user_id, field, value)

# --- –•–†–ê–ù–ò–õ–ò–©–ï –ê–ö–¢–ò–í–ù–û–°–¢–ò (–í –ü–ê–ú–Ø–¢–ò) ---
recent_users_activity = {} # {chat_id: {user_id: timestamp}}

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---
@dp.message(Command("start", "help"))
async def cmd_start(message: Message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.full_name
        await add_user(user_id, username)
        tutorial_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –±–æ—Ç–µ!\n\n"
            "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "‚ñ´Ô∏è /profile ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –±–∞–ª–∞–Ω—Å.\n"
            "‚ñ´Ô∏è /hunt ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞ –æ—Ö–æ—Ç—É –∏ –ø–æ–π–º–∞—Ç—å ü¶é.\n"
            "‚ñ´Ô∏è /pay (–≤ –æ—Ç–≤–µ—Ç) ‚Äî –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —è—â–µ—Ä–æ–∫ –¥—Ä—É–≥–æ–º—É.\n"
            "‚ñ´Ô∏è /shop ‚Äî –∫—É–ø–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è.\n"
            "‚ñ´Ô∏è /topup ‚Äî –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∑–∞ Telegram ‚òÖ.\n\n"
            "**–ö–æ–º–∞–Ω–¥—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π:**\n"
            "‚ù§Ô∏è `/marry` (–≤ –æ—Ç–≤–µ—Ç) - —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (250 ü¶é).\n"
            "üíç `/accept` - –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n"
            "üíî `/divorce` - —Ä–∞–∑–æ—Ä–≤–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è.\n\n"
            "**–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã:**\n"
            "üëë /ping ‚Äî —É–ø–æ–º—è–Ω—É—Ç—å –¥–æ 20 –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
        )
        await message.answer(tutorial_text)
    except Exception as e:
        logger.exception(f"Error in start command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(Command("profile"))
async def cmd_profile(message: Message):
    try:
        target_user = message.reply_to_message.from_user if message.reply_to_message else message.from_user
        user_id = target_user.id
        await add_user(user_id, target_user.username or target_user.full_name)
        user = await get_user(user_id)
        if not user:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        await check_items(user_id)
        user = await get_user(user_id)
        balance = user["balance"]
        now = int(datetime.now().timestamp())
        def format_item(end_timestamp):
            if end_timestamp and end_timestamp > now:
                dt = datetime.fromtimestamp(end_timestamp)
                return f"–∞–∫—Ç–∏–≤–µ–Ω –¥–æ {dt.strftime('%d.%m.%Y %H:%M')}"
            else:
                return "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        partner_status = "–≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ"
        if user["partner_id"]:
            partner_name = await get_user_mention_by_id(user['partner_id'])
            partner_status = f"–≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —Å {partner_name}"
        profile_title = "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å" if target_user.id == message.from_user.id else f"üë§ –ü—Ä–æ—Ñ–∏–ª—å {target_user.full_name}"
        text = (f"{profile_title}:\n–ë–∞–ª–∞–Ω—Å: {balance} ü¶é\n–°—Ç–∞—Ç—É—Å: {partner_status}\n\n–ü—Ä–µ—Ñ–∏–∫—Å: {format_item(user['prefix_end'])}\n–ê–Ω—Ç–∏—Ç–∞—Ä: {format_item(user['antitar_end'])}\nVIP: {format_item(user['vip_end'])}")
        kb = InlineKeyboardBuilder()
        kb.add(types.InlineKeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop_main"))
        await message.answer(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    except Exception as e:
        logger.exception(f"Error in profile command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(Command("hunt"))
async def cmd_hunt(message: Message):
    try:
        user_id = message.from_user.id
        await add_user(user_id, message.from_user.username or message.from_user.full_name)
        user = await get_user(user_id)
        await check_items(user_id)
        now = int(datetime.now().timestamp())
        last_hunt = user["last_hunt"] or 0
        cooldown = 24 * 3600
        if last_hunt and now - last_hunt < cooldown:
            remaining = cooldown - (now - last_hunt)
            hours, minutes = divmod(remaining, 3600)
            minutes //= 60
            await message.answer(f"‚è≥ –û—Ö–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {hours} —á {minutes} –º–∏–Ω.")
            return
        catch = random.randint(1, 10)
        new_balance = user["balance"] + catch
        await update_user_field(user_id, "balance", new_balance)
        await update_user_field(user_id, "last_hunt", now)
        await message.answer(f"üéâ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –Ω–∞ –æ—Ö–æ—Ç—É –∏ –ø–æ–π–º–∞–ª–∏ {catch} ü¶é!\n–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} ü¶é")
    except Exception as e:
        logger.exception(f"Error in hunt command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ö–æ—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(Command("pay"))
async def cmd_pay(message: Message):
    if not message.reply_to_message:
        await message.reply("‚ùóÔ∏è **–û—à–∏–±–∫–∞:**\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —è—â–µ—Ä–æ–∫.")
        return
    try:
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.reply("‚ùóÔ∏è **–û—à–∏–±–∫–∞:**\n–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –ü—Ä–∏–º–µ—Ä: `/pay 50`")
            return
        amount = int(args[1])
        if amount <= 0:
            await message.reply("‚ùóÔ∏è **–û—à–∏–±–∫–∞:**\n–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
    except ValueError:
        await message.reply("‚ùóÔ∏è **–û—à–∏–±–∫–∞:**\n–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    except Exception as e:
        logger.error(f"Error parsing pay command: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    sender = message.from_user
    recipient = message.reply_to_message.from_user
    if sender.id == recipient.id:
        await message.reply("‚ùóÔ∏è **–û—à–∏–±–∫–∞:**\n–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —è—â–µ—Ä–æ–∫ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        return
    if recipient.is_bot:
        await message.reply("‚ùóÔ∏è **–û—à–∏–±–∫–∞:**\n–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —è—â–µ—Ä–æ–∫ –±–æ—Ç—É.")
        return
    await add_user(sender.id, sender.username or sender.full_name)
    await add_user(recipient.id, recipient.username or recipient.full_name)
    sender_data = await get_user(sender.id)
    recipient_data = await get_user(recipient.id)
    if not sender_data or sender_data['balance'] < amount:
        await message.reply(f"‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!**\n–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –≤—Å–µ–≥–æ {sender_data.get('balance', 0)} ü¶é.")
        return
    try:
        new_sender_balance = sender_data['balance'] - amount
        new_recipient_balance = recipient_data['balance'] + amount
        await update_user_field(sender.id, "balance", new_sender_balance)
        await update_user_field(recipient.id, "balance", new_recipient_balance)
        sender_mention = await get_user_mention_by_id(sender.id)
        recipient_mention = await get_user_mention_by_id(recipient.id)
        await message.answer(f"üí∏ **–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–µ–Ω!**\n\n{sender_mention} –ø–µ—Ä–µ–≤–µ–ª(–∞) {amount} ü¶é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_mention}.\n\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {new_sender_balance} ü¶é.")
    except Exception as e:
        logger.error(f"Error during transaction: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –±—ã–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã.")

# --- –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ ---
@dp.message(Command("give"))
async def cmd_give(message: Message, command: CommandObject):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")
        return
    try:
        args = command.args.split()
        if len(args) != 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give <user_id> <amount>")
            return
        target_id, amount = int(args[0]), int(args[1])
        if amount <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
    except (ValueError, TypeError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ù—É–∂–Ω–æ: /give <user_id> <amount>")
        return
    await add_user(target_id, "Unknown")
    user = await get_user(target_id)
    if not user:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    new_balance = user["balance"] + amount
    await update_user_field(target_id, "balance", new_balance)
    await message.answer(f"‚úÖ –í—ã–¥–∞–ª–∏ {amount} ü¶é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {target_id}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} ü¶é")

@dp.message(Command("ping"))
async def cmd_ping_user(message: Message):
    if message.chat.type not in {'group', 'supergroup'}:
        await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return
    chat_id = message.chat.id
    try:
        member = await bot.get_chat_member(chat_id=chat_id, user_id=message.from_user.id)
        if member.status not in [ChatMemberStatus.CREATOR, ChatMemberStatus.ADMINISTRATOR]:
            await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.")
            return
            
        activity_for_this_chat = recent_users_activity.get(chat_id, {})
        all_admins = await bot.get_chat_administrators(chat_id)
        admin_ids = {admin.user.id for admin in all_admins}
        
        now = datetime.now().timestamp()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã "–∫–æ—Ä–∏–¥–æ—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
        one_hour_ago = now - 3600  # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω > 1 —á–∞—Å–∞)
        three_days_ago = now - (3 * 24 * 3600) # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω < 3 –¥–Ω–µ–π)
        
        eligible_users = [
            user_id for user_id, last_active in activity_for_this_chat.items()
            if three_days_ago < last_active < one_hour_ago and user_id not in admin_ids
        ]

        if not eligible_users:
            await message.reply("üòî –ù–µ–∫–æ–≥–æ —É–ø–æ–º–∏–Ω–∞—Ç—å. –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã –æ—Ç 1 —á–∞—Å–∞ –¥–æ 3 –¥–Ω–µ–π.")
            return
            
        count_to_ping = min(20, len(eligible_users))
        users_to_ping = random.sample(eligible_users, count_to_ping)

        mentions = [await get_user_mention_by_id(user_id) for user_id in users_to_ping]
        
        random_message = random.choice(PING_MESSAGES)
        mentions_text = ", ".join(mentions)
        final_text = f"{mentions_text}, {random_message}"

        await bot.send_message(chat_id=chat_id, text=final_text, parse_mode="HTML")
        logger.info(f"Admin {message.from_user.id} used /ping in chat {chat_id}. Pinged {count_to_ping} users.")
        
    except Exception as e:
        logger.error(f"Error in /ping command in chat {chat_id}: {e}")
        await message.reply("üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

# --- –°–ò–°–¢–ï–ú–ê –ú–ê–ì–ê–ó–ò–ù–ê ---
SHOP_ITEMS = {"prefix": {"name": "–ü—Ä–µ—Ñ–∏–∫—Å", "prices": {1: 20, 3: 40, 7: 100}}, "antitar": {"name": "–ê–Ω—Ç–∏—Ç–∞—Ä", "prices": {1: 30, 3: 60, 7: 130}}, "vip": {"name": "VIP", "prices": {1: 50, 3: 100, 7: 300}}}
def create_shop_menu():
    kb = InlineKeyboardBuilder()
    for item_id, item_data in SHOP_ITEMS.items():
        kb.add(types.InlineKeyboardButton(text=item_data["name"], callback_data=f"shop_item:{item_id}"))
    kb.adjust(1)
    return kb.as_markup()
def create_item_menu(item_id: str):
    kb = InlineKeyboardBuilder()
    item_data = SHOP_ITEMS[item_id]
    for days, price in item_data["prices"].items():
        kb.add(types.InlineKeyboardButton(text=f"{days} –¥–Ω. - {price} ü¶é", callback_data=f"buy:{item_id}:{days}"))
    kb.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="shop_main"))
    kb.adjust(1)
    return kb.as_markup()
@dp.message(Command("shop"))
async def cmd_shop(message: Message):
    await message.answer("üõí –ú–∞–≥–∞–∑–∏–Ω: –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏.", reply_markup=create_shop_menu())
@dp.callback_query(F.data == "shop_main")
async def cb_shop_main(callback: CallbackQuery):
    await callback.message.edit_text("üõí –ú–∞–≥–∞–∑–∏–Ω: –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏.", reply_markup=create_shop_menu())
    await callback.answer()
@dp.callback_query(F.data.startswith("shop_item:"))
async def cb_shop_item(callback: CallbackQuery):
    item_id = callback.data.split(":")[1]
    item_name = SHOP_ITEMS[item_id]["name"]
    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ ¬´{item_name}¬ª:", reply_markup=create_item_menu(item_id))
    await callback.answer()
@dp.callback_query(F.data.startswith("buy:"))
async def cb_buy_item(callback: CallbackQuery):
    try:
        _, item_id, days_str = callback.data.split(":")
        days = int(days_str)
        user_id = callback.from_user.id
        item_data = SHOP_ITEMS.get(item_id)
        if not item_data:
            await callback.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        price = item_data["prices"].get(days)
        item_name = item_data["name"]
        if price is None:
            await callback.answer("–û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        user = await get_user(user_id)
        if not user:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start", show_alert=True)
            return
        if user["balance"] < price:
            await callback.message.edit_text(f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ü¶é (—É –≤–∞—Å {user['balance']}, —Ç—Ä–µ–±—É–µ—Ç—Å—è {price}).", reply_markup=create_item_menu(item_id))
            await callback.answer()
            return
        new_balance = user["balance"] - price
        await update_user_field(user_id, "balance", new_balance)
        now_ts = int(datetime.now().timestamp())
        add_seconds = days * 24 * 3600
        field_name = f"{item_id}_end"
        current_end = user[field_name] or 0
        new_end = max(current_end, now_ts) + add_seconds
        await update_user_field(user_id, field_name, new_end)
        await callback.message.edit_text(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ ¬´{item_name}¬ª.\n–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} ü¶é")
        await callback.answer()
        buyer_mention = await get_user_mention_by_id(user_id)
        admin_notification_text = (f"üîî –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞!\n\n–ö—Ç–æ –∫—É–ø–∏–ª: {buyer_mention}\n–ß—Ç–æ –∫—É–ø–∏–ª–∏: {item_name} –Ω–∞ {days} –¥–Ω.\n–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {new_balance} ü¶é")
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(chat_id=admin_id, text=admin_notification_text, parse_mode="HTML")
            except Exception as e:
                logger.error(f"Failed to send admin notification to {admin_id}: {e}")
    except Exception as e:
        logger.exception(f"Error in buy handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ.", show_alert=True)

# --- –°–ò–°–¢–ï–ú–ê –ü–û–ü–û–õ–ù–ï–ù–ò–Ø –ß–ï–†–ï–ó TELEGRAM STARS ---
@dp.message(Command("topup"))
async def cmd_topup(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—â–µ—Ä–æ–∫, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å.\n\n‚ñ´Ô∏è **–ö—É—Ä—Å:** 3 —è—â–µ—Ä–∫–∏ = 1 ‚òÖ\n‚ñ´Ô∏è **–õ–∏–º–∏—Ç—ã:** –æ—Ç 20 –¥–æ 10 000 —è—â–µ—Ä–æ–∫ –∑–∞ —Ä–∞–∑.\n‚ñ´Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–æ 3.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel.")
    await state.set_state(TopupStates.waiting_for_amount)
@dp.message(Command("cancel"), F.state == TopupStates.waiting_for_amount)
async def cancel_topup(message: Message, state: FSMContext):
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
@dp.message(TopupStates.waiting_for_amount)
async def process_topup_amount(message: Message, state: FSMContext):
    try:
        lizards_to_buy = int(message.text)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return
    if not (20 <= lizards_to_buy <= 10000):
        await message.answer("‚ùå –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –æ—Ç 20 –¥–æ 10 000 —è—â–µ—Ä–æ–∫ –∑–∞ —Ä–∞–∑.")
        return
    if lizards_to_buy % 3 != 0:
        lower = (lizards_to_buy // 3) * 3
        upper = lower + 3
        await message.answer(f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—â–µ—Ä–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–æ 3.\n\n–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, {lower if lower >= 20 else upper} –∏–ª–∏ {upper} ü¶é.")
        return
    stars_price = lizards_to_buy // 3
    await state.clear()
    await bot.send_invoice(chat_id=message.from_user.id, title=f"–ü–æ–∫—É–ø–∫–∞ {lizards_to_buy} ü¶é", description=f"–ü–∞–∫–µ—Ç –∏–∑ {lizards_to_buy} —è—â–µ—Ä–æ–∫ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –≤ –±–æ—Ç–µ.", payload=f"lizard_topup:{message.from_user.id}:{lizards_to_buy}", currency="XTR", prices=[LabeledPrice(label=f"{lizards_to_buy} ü¶é", amount=stars_price)])
@dp.pre_checkout_query()
async def pre_checkout_query_handler(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
@dp.message(F.successful_payment)
async def successful_payment_handler(message: Message):
    try:
        payload = message.successful_payment.invoice_payload
        _, user_id_str, lizards_str = payload.split(":")
        user_id = int(user_id_str)
        lizards_to_add = int(lizards_str)
        await add_user(user_id, message.from_user.username or message.from_user.full_name)
        user = await get_user(user_id)
        current_balance = user['balance'] if user else 0
        new_balance = current_balance + lizards_to_add
        await update_user_field(user_id, 'balance', new_balance)
        await bot.send_message(chat_id=user_id, text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {lizards_to_add} ü¶é\n–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} ü¶é")
    except Exception as e:
        logger.error(f"Error in successful_payment_handler: {e}")
        await bot.send_message(chat_id=message.from_user.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —è—â–µ—Ä–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

# --- –°–ò–°–¢–ï–ú–ê –ë–†–ê–ö–û–í ---
MARRIAGE_COST = 250
@dp.message(Command("marry"))
async def cmd_marry(message: Message):
    if not message.reply_to_message:
        await message.reply("–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    proposer = message.from_user
    target = message.reply_to_message.from_user
    if proposer.id == target.id:
        await message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        return
    if target.is_bot:
        await message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç—É.")
        return
    await add_user(proposer.id, proposer.username or proposer.full_name)
    await add_user(target.id, target.username or target.full_name)
    proposer_data = await get_user(proposer.id)
    target_data = await get_user(target.id)
    if proposer_data['partner_id']:
        await message.reply("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.")
        return
    if proposer_data['balance'] < MARRIAGE_COST:
        await message.reply(f"‚ùå –î–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ {MARRIAGE_COST} ü¶é.\n–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {proposer_data['balance']} ü¶é.")
        return
    if target_data['partner_id']:
        await message.reply(f"{target.full_name} —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.")
        return
    if target_data['proposal_from_id']:
        await message.reply(f"–£ {target.full_name} —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞.")
        return
    kb = InlineKeyboardBuilder()
    kb.add(types.InlineKeyboardButton(text="–î–∞, —è —É–≤–µ—Ä–µ–Ω", callback_data=f"marry_confirm:{proposer.id}:{target.id}"))
    kb.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="marry_cancel"))
    target_mention = await get_user_mention_by_id(target.id)
    await message.reply(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {target_mention}?\n–°—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: {MARRIAGE_COST} ü¶é.\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.", reply_markup=kb.as_markup(), parse_mode="HTML")
@dp.message(Command("accept"))
async def cmd_accept(message: Message):
    user_id = message.from_user.id
    await add_user(user_id, message.from_user.username or message.from_user.full_name)
    user_data = await get_user(user_id)
    if not user_data['proposal_from_id']:
        await message.reply("–í–∞–º –Ω–∏–∫—Ç–æ –Ω–µ –¥–µ–ª–∞–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")
        return
    proposer_id = user_data['proposal_from_id']
    proposer_data = await get_user(proposer_id)
    if not proposer_data or proposer_data['partner_id']:
        await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update_user_field(user_id, "proposal_from_id", 0)
        return
    await update_user_field(user_id, "partner_id", proposer_id)
    await update_user_field(proposer_id, "partner_id", user_id)
    await update_user_field(user_id, "proposal_from_id", 0)
    user_mention = await get_user_mention_by_id(user_id)
    proposer_mention = await get_user_mention_by_id(proposer_id)
    await message.answer(f"üíñ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! {proposer_mention} –∏ {user_mention} —Ç–µ–ø–µ—Ä—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ —Å–æ—Å—Ç–æ—è—Ç –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö! üíñ", parse_mode="HTML")
@dp.message(Command("divorce"))
async def cmd_divorce(message: Message):
    user_id = message.from_user.id
    await add_user(user_id, message.from_user.username or message.from_user.full_name)
    user_data = await get_user(user_id)
    if not user_data['partner_id']:
        await message.reply("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö, –Ω–µ–∫–æ–≥–æ –±—Ä–æ—Å–∞—Ç—å.")
        return
    kb = InlineKeyboardBuilder()
    kb.add(types.InlineKeyboardButton(text="–î–∞, —è —Ö–æ—á—É —Ä–∞–∑–≤–µ—Å—Ç–∏—Å—å", callback_data="confirm_divorce"))
    kb.add(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_divorce"))
    await message.reply("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Ä–≤–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", reply_markup=kb.as_markup())
@dp.callback_query(F.data.startswith("marry_confirm:"))
async def confirm_marry(callback: CallbackQuery):
    _, proposer_id_str, target_id_str = callback.data.split(":")
    proposer_id = int(proposer_id_str)
    if callback.from_user.id != proposer_id:
        await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!", show_alert=True)
        return
    target_id = int(target_id_str)
    proposer_data = await get_user(proposer_id)
    target_data = await get_user(target_id)
    if not proposer_data or not target_data:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –æ–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    if proposer_data['balance'] < MARRIAGE_COST:
        await callback.message.edit_text(f"‚ùå –£–ø—Å! –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è {MARRIAGE_COST} ü¶é.")
        await callback.answer()
        return
    if target_data['partner_id'] or target_data['proposal_from_id']:
        await callback.message.edit_text("‚ùå –£–ø—Å! –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤—Å—Ç—É–ø–∏–ª –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.")
        await callback.answer()
        return
    try:
        new_balance = proposer_data['balance'] - MARRIAGE_COST
        await update_user_field(proposer_id, "balance", new_balance)
        await update_user_field(target_id, "proposal_from_id", proposer_id)
        proposer_mention = await get_user_mention_by_id(proposer_id)
        target_mention = await get_user_mention_by_id(target_id)
        await callback.message.edit_text("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        await callback.message.answer(f"üíç {target_mention}, –≤–∞–º –ø–æ—Å—Ç—É–ø–∏–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞ –æ—Ç {proposer_mention}!\n\n–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –µ–≥–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `/accept`.\n\n_(–° {proposer_mention} –±—ã–ª–æ —Å–ø–∏—Å–∞–Ω–æ {MARRIAGE_COST} ü¶é –∑–∞ —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)_", parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        logger.error(f"Error during marriage confirmation: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()
@dp.callback_query(F.data == "marry_cancel")
async def cancel_marry(callback: CallbackQuery):
    await callback.message.edit_text("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()
@dp.callback_query(F.data == "confirm_divorce")
async def confirm_divorce(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_data = await get_user(user_id)
    if not user_data or not user_data['partner_id']:
        await callback.message.edit_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.")
        await callback.answer()
        return
    partner_id = user_data['partner_id']
    await update_user_field(user_id, "partner_id", 0)
    await update_user_field(partner_id, "partner_id", 0)
    user_mention = await get_user_mention_by_id(user_id)
    partner_mention = await get_user_mention_by_id(partner_id)
    await callback.message.edit_text("–û—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∞–∑–æ—Ä–≤–∞–Ω—ã.")
    await callback.message.answer(f"üíî {user_mention} –∏ {partner_mention} –±–æ–ª—å—à–µ –Ω–µ –≤–º–µ—Å—Ç–µ. üíî", parse_mode="HTML")
    await callback.answer()
@dp.callback_query(F.data == "cancel_divorce")
async def cancel_divorce(callback: CallbackQuery):
    await callback.message.edit_text("–†–∞–∑–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω. –í–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!")
    await callback.answer()


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ê–ö–¢–ò–í–ù–û–°–¢–ò (–î–û–õ–ñ–ï–ù –ë–´–¢–¨ –í –ö–û–ù–¶–ï)---
@dp.message()
async def a_track_user_activity_final(message: types.Message):
    """
    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≤–∏—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –ø–æ–π–º–∞–Ω—ã –∫–æ–º–∞–Ω–¥–∞–º–∏.
    –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö.
    """
    if message.chat.type in {'group', 'supergroup'}:
        if not message.from_user.is_bot:
            recent_users_activity.setdefault(message.chat.id, {})[message.from_user.id] = datetime.now().timestamp()


# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
async def main():
    await init_db()
    bot.default_parse_mode = "HTML"
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())