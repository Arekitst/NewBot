from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from functools import wraps
import sqlite3
import asyncio

# ----------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ------------

conn = sqlite3.connect('main.db', check_same_thread=False)
cursor = conn.cursor()

def setup_database():
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        balance INTEGER DEFAULT 0,
        prefix TEXT DEFAULT NULL,
        has_vip BOOLEAN DEFAULT FALSE,
        has_antitar BOOLEAN DEFAULT FALSE
    )
    ''')
    conn.commit()

def add_user(user_id, username=None):
    cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute(
            "INSERT INTO users (user_id, username) VALUES (?, ?)",
            (user_id, username or "")
        )
        conn.commit()

def get_user_profile(user_id):
    cursor.execute("""
        SELECT user_id, username, balance, prefix, has_vip, has_antitar
        FROM users WHERE user_id = ?
    """, (user_id,))
    return cursor.fetchone()

def update_balance(user_id, amount):
    cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
    conn.commit()

def set_balance(user_id, amount):
    cursor.execute("UPDATE users SET balance = ? WHERE user_id = ?", (amount, user_id))
    conn.commit()

# ----------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ------------

API_TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù_–ó–î–ï–°–¨"  # –Ω–µ –∑–∞–±—É–¥—å –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω!

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# ----------- –ê–¥–º–∏–Ω –ª–∏—Å—Ç ------------

ADMIN_IDS = {6179115044, 7189733067}

def admin_only(handler):
    @wraps(handler)
    async def wrapper(message: types.Message, *args, **kwargs):
        if message.from_user.id not in ADMIN_IDS:
            await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞.")
            return
        return await handler(message, *args, **kwargs)
    return wrapper

# ----------- –ö–æ–º–∞–Ω–¥–∞ /admin ------------

@dp.message(Command("admin"))
@admin_only
async def cmd_admin_panel(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã", callback_data="admin_give")],
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏
    ])
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=kb)

@dp.callback_query(Text("admin_give"))
async def admin_give_start(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        return await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞.", show_alert=True)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/give <user_id> <amount>\n–ò–ª–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /give <amount>")
    await callback.answer()

# ----------- –ö–æ–º–∞–Ω–¥–∞ /give ------------

@dp.message(Command("give"))
@admin_only
async def cmd_give(message: types.Message):
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –≤—ã–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–∞ —á–µ–π –æ—Ç–≤–µ—Ç
    if message.reply_to_message is not None:
        parts = message.text.split()
        if len(parts) != 2 or not parts[1].isdigit():
            return await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç–µ: /give <amount>")
        amount = int(parts[1])
        if amount <= 0:
            return await message.reply("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
        target_user = message.reply_to_message.from_user
        if target_user.id == message.from_user.id:
            return await message.reply("‚ùå –ù–µ–ª—å–∑—è –≤—ã–¥–∞–≤–∞—Ç—å —Å–µ–±–µ.")
        add_user(target_user.id, target_user.username)
        update_balance(target_user.id, amount)
        new_bal = get_user_profile(target_user.id)[2]
        await message.reply(
            f"ü¶é –í—ã–¥–∞–Ω–æ {amount} ü¶é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user.full_name} (ID: {target_user.id}). "
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_bal} ü¶é."
        )
    else:
        # –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: /give <user_id> <amount>
        parts = message.text.split()
        if len(parts) != 3 or not (parts[1].isdigit() and parts[2].isdigit()):
            return await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give <user_id> <amount>")
        target_id = int(parts[1])
        amount = int(parts[2])
        if amount <= 0:
            return await message.reply("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
        if target_id == message.from_user.id:
            return await message.reply("‚ùå –ù–µ–ª—å–∑—è –≤—ã–¥–∞–≤–∞—Ç—å —Å–µ–±–µ.")
        add_user(target_id)
        update_balance(target_id, amount)
        new_bal = get_user_profile(target_id)[2]
        await message.reply(
            f"ü¶é –í—ã–¥–∞–Ω–æ {amount} ü¶é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}. "
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_bal} ü¶é."
        )

# ----------- –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ ------------

async def main():
    setup_database()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞, –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
